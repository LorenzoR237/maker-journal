---
import BaseLayout from '../../layouts/BaseLayout.astro';

// Load images from /src/images/<category>/<file>
const modules = import.meta.glob('/src/images/*/*.{jpg,jpeg,png,webp,avif}', { eager: true });

const items = Object.entries(modules).map(([path, mod]) => {
  // path: /src/images/<category>/<file>
  const parts = path.split('/');         // ["", "src", "images", "<category>", "<file>"]
  const category = parts[3].toLowerCase(); // <- index 3 is the category
  const img = (mod as any).default;      // Astro asset: { src, width, height }
  return { src: img.src, width: img.width, height: img.height, category, alt: `${category} photo` };
});

const TABS = ['All', 'Nature', 'Travel', 'Street'];
---

<BaseLayout title="Photos">
  <section class="ph-wrap">
    <!-- Tabs -->
    <div class="ph-tabs" role="tablist" aria-label="Photo categories">
      {TABS.map((t, i) => (
        <button
          class={`ph-tab ${i === 0 ? 'is-active' : ''}`}
          role="tab"
          aria-selected={i === 0 ? 'true' : 'false'}
          data-filter={t.toLowerCase()}
          tabindex={i === 0 ? '0' : '-1'}
        >
          {t}
        </button>
      ))}
    </div>

    <!-- Grid -->
    <div class="ph-grid" id="photo-grid">
      {items.map((it) => (
        <figure class="ph-card" data-category={it.category}>
          <a href={it.src} data-fancybox="gallery">
            <img
              src={it.src}
              alt={it.alt}
              loading="lazy"
              width={it.width}
              height={it.height}
            />
          </a>
        </figure>
      ))}
    </div>
  </section>

  <style>
    .ph-wrap { max-width: 1200px; margin: 0 auto; padding: 16px; }
    .ph-tabs { display:flex; gap:8px; flex-wrap:wrap; margin:0 0 16px; }
    .ph-tab { appearance:none; border:1px solid #ddd; background:#fff; color:#333; padding:8px 12px; border-radius:999px; font-size:.95rem; cursor:pointer; }
    .ph-tab.is-active, .ph-tab:focus { outline:none; border-color:#333; }
    .ph-grid { display:grid; grid-template-columns:repeat(auto-fill, minmax(220px, 1fr)); gap:12px; }
    .ph-card { border-radius:8px; overflow:hidden; background:#f7f7f7; }
    .ph-card img { width:100%; height:100%; object-fit:cover; display:block; }
    .is-hidden { display:none !important; }
    @media (prefers-color-scheme: dark) {
      .ph-tab { border-color:#333; background:#111; color:#ddd; }
      .ph-card { background:#111; }
    }
  </style>

  <script is:inline>
    const tabs = Array.from(document.querySelectorAll('.ph-tab'));
    const cards = Array.from(document.querySelectorAll('.ph-card'));

    function setFilter(filter) {
      tabs.forEach(btn => {
        const active = btn.dataset.filter === filter;
        btn.classList.toggle('is-active', active);
        btn.setAttribute('aria-selected', String(active));
        btn.tabIndex = active ? 0 : -1;
      });
      if (filter === 'all') {
        cards.forEach(c => c.classList.remove('is-hidden'));
      } else {
        cards.forEach(c => c.classList.toggle('is-hidden', c.dataset.category !== filter));
      }
    }

    setFilter('all');

    tabs.forEach(btn => {
      btn.addEventListener('click', () => setFilter(btn.dataset.filter));
      btn.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
          e.preventDefault();
          const i = tabs.indexOf(btn);
          const next = e.key === 'ArrowRight' ? (i + 1) % tabs.length : (i - 1 + tabs.length) % tabs.length;
          tabs[next].focus();
        }
      });
    });
  </script>
</BaseLayout>